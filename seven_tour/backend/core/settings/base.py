"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = (
    Path(__file__).resolve().parent.parent.parent
)  # Should point to 'backend' directory
CORE_DIR = Path(__file__).resolve().parent.parent  # Should point to 'core' directory


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY", "django-insecure-placeholder-for-dev")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DJANGO_DEBUG", "True") == "True"

ALLOWED_HOSTS = ["localhost", "127.0.0.1"]  # Add your production hosts later


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    'rest_framework.authtoken', # Required by dj-rest-auth for token authentication
    'dj_rest_auth',
    'dj_rest_auth.registration', # For registration endpoints
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google', # For Google OAuth

    "corsheaders",
    'django_filters', # Added for DRF filtering

    # Local apps
    'users.apps.UsersConfig',
    'tours.apps.ToursConfig',
]

# A SITE_ID is required by django-allauth
SITE_ID = 1

# dj-rest-auth settings
REST_AUTH = {
    'USE_JWT': True, # Using JWT for token authentication
    'JWT_AUTH_HTTPONLY': False, # Set to True if you want to hide JWT from JS but then refresh endpoint is needed from client
    # 'JWT_AUTH_COOKIE': 'seven-tour-auth', # If you want to store JWT in a cookie
    # 'JWT_AUTH_REFRESH_COOKIE': 'seven-tour-refresh-token',
    'USER_DETAILS_SERIALIZER': 'users.serializers.UserDetailsSerializer', # We'll need to create this
    'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer', # We'll need to create this
    # 'LOGIN_SERIALIZER': 'path.to.your.CustomLoginSerializer',
    # 'PASSWORD_RESET_SERIALIZER': 'path.to.your.CustomPasswordResetSerializer',
    # 'PASSWORD_CHANGE_SERIALIZER': 'path.to.your.CustomPasswordChangeSerializer',
}
# Note: If USE_JWT is True, djangorestframework-simplejwt needs to be installed and configured.
# Let's assume for now dj-rest-auth's default token auth (non-JWT) or handle simplejwt setup next.
# For simplicity with initial setup, let's switch to Token authentication (non-JWT first)
# To use dj-rest-auth's built-in TokenAuthentication (non-JWT):
# REST_AUTH = {
#     'USER_DETAILS_SERIALIZER': 'users.serializers.UserDetailsSerializer',
#     'REGISTER_SERIALIZER': 'users.serializers.CustomRegisterSerializer',
# }
# And ensure 'rest_framework.authtoken' is in INSTALLED_APPS.

# django-allauth settings
ACCOUNT_AUTHENTICATION_METHOD = 'email' # Use email for login
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False # We are using email as the primary identifier
ACCOUNT_USER_MODEL_USERNAME_FIELD = None # Not using a username field on CustomUser
ACCOUNT_EMAIL_VERIFICATION = 'optional' # Can be 'mandatory' or 'none'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_ADAPTER = 'users.adapter.CustomAccountAdapter' # We might need to create this for custom behavior

# Provider specific settings for django-allauth (Google)
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        },
        # You'll need to create a Google Cloud Project and get these:
        # 'APP': {
        #     'client_id': os.environ.get('GOOGLE_OAUTH_CLIENT_ID'),
        #     'secret': os.environ.get('GOOGLE_OAUTH_SECRET_KEY'),
        #     'key': '' # Not always needed
        # }
        # For now, setup will proceed without actual client_id and secret.
        # These would be configured in the Django Admin for Social Applications.
    }
}

# Email backend - for development, console is fine. For production, configure SMTP.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

# Django REST Framework Simple JWT settings
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60), # Default is 5 minutes
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),    # Default is 1 day
    'ROTATE_REFRESH_TOKENS': True, # When a refresh token is used, a new one is issued
    'BLACKLIST_AFTER_ROTATION': True, # Blacklist old refresh tokens to prevent reuse
    'UPDATE_LAST_LOGIN': True, # Update user's last_login field upon token refresh

    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY, # Uses Django's SECRET_KEY by default
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,

    'AUTH_HEADER_TYPES': ('Bearer',), # Default is ('Bearer',)
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION', # Default
    'USER_ID_FIELD': 'id', # Default
    'USER_ID_CLAIM': 'user_id', # Default
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule', # Default

    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',), # Default
    'TOKEN_TYPE_CLAIM': 'token_type', # Default
    'TOKEN_USER_CLASS': 'rest_framework_simplejwt.models.TokenUser', # Default

    'JTI_CLAIM': 'jti', # Default

    'SLIDING_TOKEN_REFRESH_EXP_CLAIM': 'refresh_exp', # Default
    'SLIDING_TOKEN_LIFETIME': timedelta(minutes=5), # Default
    'SLIDING_TOKEN_REFRESH_LIFETIME': timedelta(days=1), # Default
}


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CORS middleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(CORE_DIR, "templates")],  # If you have global templates
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ.get("DB_NAME", "seven_tour_db"),
        "USER": os.environ.get("DB_USER", "seven_tour_user"),
        "PASSWORD": os.environ.get(
            "DB_PASSWORD", "password"
        ),  # Use a strong password in prod
        "HOST": os.environ.get("DB_HOST", "localhost"),  # Or your Docker service name
        "PORT": os.environ.get("DB_PORT", "5432"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Authentication User Model
AUTH_USER_MODEL = 'users.CustomUser'


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"  # Consider 'Africa/Addis_Ababa' for Ethiopian context

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")  # For production
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),  # For development static files
]

# Media files (User uploaded content)
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# CORS settings
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",  # React default dev server
    "http://127.0.0.1:3000",
]
CORS_ALLOW_CREDENTIALS = True  # If you need to send cookies or auth headers

# REST Framework settings (optional, can be configured later)
REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        'dj_rest_auth.jwt_auth.JWTCookieAuthentication', # Handles JWT from cookie (if configured in REST_AUTH)
        'rest_framework_simplejwt.authentication.JWTAuthentication', # Handles JWT from Authorization header
        # 'rest_framework.authentication.SessionAuthentication', # Optional, if you also want session auth
        # 'rest_framework.authentication.TokenAuthentication', # This is for dj-rest-auth's non-JWT token
    ),
    "DEFAULT_PERMISSION_CLASSES": (
        # 'rest_framework.permissions.IsAuthenticated', # Default to allow any for now for public APIs
        'rest_framework.permissions.AllowAny',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ),
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10 # Default page size for paginated results
}

# Email Backend (configure for actual email sending in production)
EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"  # For development
# EMAIL_HOST = 'smtp.example.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'your-email@example.com'
# EMAIL_HOST_PASSWORD = 'your-email-password'
# DEFAULT_FROM_EMAIL = 'webmaster@example.com'
